# -*- coding: utf-8 -*-
"""01-taskA-Classification_TraininingAndInference.ipynb

Automatically generated by Colaboratory.
"""

import torch
from simpletransformers.classification import ClassificationModel, ClassificationArgs
import pandas as pd
from sklearn.metrics import classification_report
from gensim.utils import simple_preprocess
import sys

"""# Reading Train and Val Datasets for Training the Models"""

train_data = pd.read_csv('data/TaskA-TrainingSet.csv')
test_data = pd.read_csv(sys.argv[1])

unq_headers = list(train_data['section_header'].unique())
label2id = {i:idx for idx,i in enumerate(unq_headers)}
id2label = {idx:i for idx,i in enumerate(unq_headers)}

train_data['section_header'] = train_data['section_header'].replace(label2id)
train_data['text'] = train_data['dialogue'].map(lambda x: x.replace('\n',' ').replace('\r',' '))
train_data['labels'] = train_data['section_header']
test_data['text'] = test_data['dialogue'].map(lambda x: x.replace('\n',' ').replace('\r',' '))

"""# Calculating Class weights because of Class imbalance in the dataset"""

from sklearn.utils import class_weight
import numpy as np
class_weights = class_weight.compute_class_weight('balanced',classes=np.unique(train_data['labels'].tolist()),y=train_data['labels'])

train_df = pd.DataFrame(train_data)

model1_args = ClassificationArgs(num_train_epochs=10)
model1_args.overwrite_output_dir = True

model1 = ClassificationModel(
    "bert", 
    "emilyalsentzer/Bio_ClinicalBERT",
    num_labels=20,
    weight=list(class_weights),
    args=model1_args,
    use_cuda=True
) 
model1.train_model(train_df)

strong_indicator_words = {
    'GYNHX': ['pregnant', 'miscarriage', 'abortion', 'periods', 'menstrual', 'obstetrician', 'gyneco'],
    'IMMUNIZATIONS': ['vaccine', 'immunization']
}

new_predictions=[]
for i in test_data['text'].tolist():
  if any(word in i for word in strong_indicator_words['GYNHX']):
    new_predictions.append(label2id['GYNHX'])
  elif any(word in i for word in strong_indicator_words['IMMUNIZATIONS']):
    new_predictions.append(label2id['IMMUNIZATIONS'])
  else:
    new_predictions.append(model1.predict([i])[0][0])

test_predictions_with_ids = []
for i,j in zip(test_data['ID'].tolist(), new_predictions):
  test_predictions_with_ids.append([i,id2label[j]])

test_df = pd.DataFrame(test_predictions_with_ids, columns = ['ID', 'SystemOutput1'])
test_df.to_csv(f'intermediate_outputs/{sys.argv[2]}/final_taska_classification_output_ontest.csv', index=False)
